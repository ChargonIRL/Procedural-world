using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshFilter))]
public class MeshGenerator : MonoBehaviour
{
    Mesh mesh;

    Vector3[] vertices;
    int[] triangles;
    Color[] colours;

    public int xSize = 20;
    public int zSize = 20;

    public int textureWidth = 1024;
    public int textureHeight = 1024;

    public float noise01Scale = 2f;
    public float noise01Amp = 2f;

    public float noise02Scale = 4f;
    public float noise02Amp = 4f;

    public float noise03Scale = 6f;
    public float noise03Amp = 6f;

    public Gradient gradient;

    float minTerrainHeight;
    float maxTerrainHeight;

    public int xOffset;
    public int zOffset;

    FlattenMesh fm;

    public int p = 0;

    // Start is called before the first frame update
    void Start()
    {
        fm = GetComponent<FlattenMesh>();
        mesh = new Mesh();
        xOffset = Random.Range(0, 100);
        zOffset = Random.Range(0, 100);
        CreateShape();
        UpdateMesh();

        GetComponent<MeshFilter>().mesh = mesh;
        

        gameObject.AddComponent<MeshCollider>();
    }
    void CreateShape()
    {
        vertices = new Vector3[(xSize + 1) * (zSize + 1)];

        for (int i = 0, z = 0; z <= zSize; z++)
        {
            for (int x = 0; x <= xSize; x++)
            {
                float y = CalculateNoise(x, z);
                vertices[i] = new Vector3(x, y, z);

                if (y > maxTerrainHeight)
                    maxTerrainHeight = y;
                if (y < minTerrainHeight)
                    minTerrainHeight = y;

                i++;
            }
        }

        triangles = new int[xSize * zSize * 6];

        int vert = 0;
        int tris = 0;
        for (int z = 0; z < zSize; z++)
        {
            for (int x = 0; x < xSize; x++)
            {
                triangles[tris + 0] = vert + 0;
                triangles[tris + 1] = vert + xSize + 1;
                triangles[tris + 2] = vert + 1;
                triangles[tris + 3] = vert + 1;
                triangles[tris + 4] = vert + xSize + 1;
                triangles[tris + 5] = vert + xSize + 2;

                vert++;
                tris += 6;
            }
            vert++;
        }

        colours = new Color[vertices.Length];
        for (int i = 0, z = 0; z <= zSize; z++)
        {
            for (int x = 0; x <= xSize; x++)
            {
                float height = Mathf.InverseLerp(minTerrainHeight, maxTerrainHeight, vertices[i].y);
                colours[i] = gradient.Evaluate(height);
                i++;
            }
        }
    }

    void UpdateMesh()
    {
        mesh.Clear();

        mesh.vertices = vertices;
        mesh.triangles = triangles;
        mesh.colors = colours;

        mesh.RecalculateNormals();

    }

    private float CalculateNoise(float x, float z)
    {
        float noise;
        noise = Mathf.PerlinNoise((x + xOffset), (z + zOffset)) * 5 * fm.pixelValues[p];
        noise += Mathf.PerlinNoise((x + xOffset) * noise01Amp, (z + zOffset) * noise01Amp) * noise01Scale * fm.pixelValues[p];
        noise -= Mathf.PerlinNoise((x + xOffset) * noise02Amp, (z + zOffset) * noise02Amp) * noise02Scale * fm.pixelValues[p];
        noise += Mathf.PerlinNoise((x + xOffset) * noise03Amp, (z + zOffset) * noise03Amp) * noise03Scale * 2 * fm.pixelValues[p];
        p += 1;
        return noise;
    }
}
